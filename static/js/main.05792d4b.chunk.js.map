{"version":3,"sources":["Navbar.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","onClick","this","props","newGame","Component","Tile","bind","handleMatch","id","color","enabled","className","style","status","background","Game","Tiles","tiles","map","tile","key","App","state","createTileObjects","halfPair","matchedColor","Colors","i","colorIndex","Math","floor","random","allColors","length","currentColor","includes","push","randomColors","currentIndex","splice","getRandomColors","show","setState","enable","setTimeout","hide","direction","defaultProps","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.05792d4b.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Navbar.css';\r\n\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <header>\r\n        <h1>Memory Game</h1>\r\n        <h2 onClick={this.props.newGame}>New Game</h2>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;","import React, {Component} from 'react';\r\nimport './Game.css';\r\n\r\nclass Tile extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.onClick = this.onClick.bind(this);\r\n\t}\r\n\tonClick(){\r\n\t\tthis.props.handleMatch(this.props.id,this.props.color,this.props.enabled);\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tclassName='Tile'\r\n\t\t\t\tstyle={ this.props.status === 'hidden' ? {background: 'gray'} : {background: this.props.color}}\r\n\t\t\t\tonClick={this.onClick}\r\n\t\t\t></div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nclass Game extends Component {\r\n\trender() {\r\n\t\tconst Tiles = this.props.tiles.map(tile => {\r\n\t\t\treturn <Tile\r\n\t\t\t\t\t\tkey={tile.id}\r\n\t\t\t\t\t\tid={tile.id}\r\n\t\t\t\t\t\tcolor={tile.color}\r\n\t\t\t\t\t\tstatus={tile.status}\r\n\t\t\t\t\t\tenabled={tile.enabled}\r\n\t\t\t\t\t\thandleMatch={this.props.handleMatch}\r\n\t\t\t\t\t/>\r\n\t\t});\r\n\t\treturn (\r\n\t\t\t<div className='Game' >{Tiles}</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Game;","import React, {Component} from 'react';\nimport './App.css';\nimport Navbar from './Navbar';\nimport Game from './Game';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tiles: this.createTileObjects(),\n      halfPair: false,\n      matchedColor: ''\n    }\n    this.handleMatch = this.handleMatch.bind(this);\n    this.newGame = this.newGame.bind(this);\n  }\n\n  getRandomColors() {\n    let Colors = [];\n    for(let i = 1; i <= 8; i++){\n      let colorIndex = Math.floor(Math.random() * this.props.allColors.length);\n      let currentColor = this.props.allColors[colorIndex];\n      if(Colors.includes(currentColor)){\n        i--;\n      } else {\n        Colors.push(currentColor,currentColor);\n      }\n    }\n    let randomColors = [];\n    while (Colors.length > 0) {\n      let currentIndex = Math.floor(Math.random() * Colors.length);\n      randomColors.push(Colors[currentIndex]);\n      Colors.splice(currentIndex,1);\n    }\n    return randomColors;\n  }\n\n  createTileObjects(){\n    return this.getRandomColors().map((color,i) => {\n      return ({id: i, color, status: 'hidden', enabled: true})\n    });\n  }\n\n  handleMatch(id,color,enabled){\n    if(enabled){\n      let tiles = this.show(id);\n      if(this.state.halfPair){\n        this.setState({tiles, halfPair: false});\n        if(this.state.matchedColor === color){\n          tiles = this.state.tiles.map(tile => {\n            if(tile.status === 'shown'){\n              tile.status = 'matched';\n            }\n            return tile;\n          });\n          tiles = this.enable(false,'matched');\n          this.setState({tiles});\n        } else {\n          this.enable(false,'shown');\n          this.enable(false,'hidden');\n          this.setState({tiles});\n          setTimeout(() => {\n            tiles = this.enable(true,'shown');\n            tiles = this.enable(true,'hidden');\n            tiles = this.hide('shown');\n            this.setState({tiles})\n          },1000)\n        }\n      } else {\n        this.enable(false,'shown');\n        this.setState({halfPair: true, matchedColor: color, tiles});\n      }\n    }\n  }\n\n  show(id){\n    return this.state.tiles.map(tile => {\n      if (id === tile.id){\n        tile.status = 'shown';\n      }\n      return tile;\n    });\n  }\n\n  hide(status){\n    return this.state.tiles.map(tile => {\n      if (status){\n        if(tile.status === status){\n          tile.status = 'hidden';\n        }\n      } else {\n        tile.status = 'hidden';\n      }\n      return tile;\n    });\n  }\n\n  enable(direction,status){\n    return this.state.tiles.map(tile => {\n      if(tile.status === status){\n        tile.enabled = direction;\n      }\n      return tile;\n    });\n  }\n\n  newGame(){\n    this.setState({\n      tiles: this.createTileObjects(),\n      halfPair: false,\n      matchedColor: ''\n    });\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Navbar newGame={this.newGame} />\n        <Game tiles={this.state.tiles} handleMatch={this.handleMatch} />\n      </div>\n    );\n  }\n}\n\nApp.defaultProps = {\n  allColors: [\"AliceBlue\",\"AntiqueWhite\",\"Aqua\",\"Aquamarine\",\"Azure\",\"Beige\",\"Bisque\",\"Black\",\"BlanchedAlmond\",\n              \"Blue\",\"BlueViolet\",\"Brown\",\"BurlyWood\",\"CadetBlue\",\"Chartreuse\",\"Chocolate\",\n              \"Coral\",\"CornflowerBlue\",\"Cornsilk\",\"Crimson\",\"Cyan\",\"DarkBlue\",\"DarkCyan\",\"DarkGoldenRod\",\n              \"DarkGray\",\"DarkGreen\",\"DarkKhaki\",\"DarkMagenta\",\"DarkOliveGreen\",\"Darkorange\",\n              \"DarkOrchid\",\"DarkRed\",\"DarkSalmon\",\"DarkSeaGreen\",\"DarkSlateBlue\",\"DarkSlateGray\",\n              \"DarkTurquoise\",\"DarkViolet\",\"DeepPink\",\"DeepSkyBlue\",\"DimGray\",\"DodgerBlue\",\n              \"FireBrick\",\"FloralWhite\",\"ForestGreen\",\"Fuchsia\",\"Gainsboro\",\"GhostWhite\",\"Gold\",\"GoldenRod\",\n              \"Green\",\"GreenYellow\",\"HoneyDew\",\"HotPink\",\"IndianRed\",\"Indigo\",\"Ivory\",\"Khaki\",\n              \"Lavender\",\"LavenderBlush\",\"LawnGreen\",\"LemonChiffon\",\"LightBlue\",\"LightCoral\",\"LightCyan\",\n              \"LightGoldenRodYellow\",\"LightGray\",\"LightGreen\",\"LightPink\",\"LightSalmon\",\n              \"LightSeaGreen\",\"LightSkyBlue\",\"LightSlateGray\",\"LightSteelBlue\",\"LightYellow\",\n              \"Lime\",\"LimeGreen\",\"Linen\",\"Magenta\",\"Maroon\",\"MediumAquaMarine\",\"MediumBlue\",\"MediumOrchid\",\n              \"MediumPurple\",\"MediumSeaGreen\",\"MediumSlateBlue\",\"MediumSpringGreen\",\"MediumTurquoise\",\n              \"MediumVioletRed\",\"MidnightBlue\",\"MintCream\",\"MistyRose\",\"Moccasin\",\"NavajoWhite\",\"Navy\",\n              \"OldLace\",\"Olive\",\"OliveDrab\",\"Orange\",\"OrangeRed\",\"Orchid\",\"PaleGoldenRod\",\"PaleGreen\",\n              \"PaleTurquoise\",\"PaleVioletRed\",\"PapayaWhip\",\"PeachPuff\",\"Peru\",\"Pink\",\"Plum\",\"PowderBlue\",\n              \"Purple\",\"Red\",\"RosyBrown\",\"RoyalBlue\",\"SaddleBrown\",\"Salmon\",\"SandyBrown\",\"SeaGreen\",\n              \"SeaShell\",\"Sienna\",\"Silver\",\"SkyBlue\",\"SlateBlue\",\"SlateGray\",\"Snow\",\"SpringGreen\",\n              \"SteelBlue\",\"Tan\",\"Teal\",\"Thistle\",\"Tomato\",\"Turquoise\",\"Violet\",\"Wheat\",\"White\",\"WhiteSmoke\",\n              \"Yellow\",\"YellowGreen\"]\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}